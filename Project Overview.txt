In this project, a practical communication framework for a Neighbourhood Area Network (NAN) for automatic metering applications was implemented using open hardware and open software platforms. The experimental implementation of the framework consist of a network of three router nodes collaborating on a global task. Each node collects data from oncoming traffic, aggregates it with data from its own cluster and relays the aggregate data towards a central gateway device. The gateway in turn uploads the data into the cloud making it available for customer applications and analytics. 

The router nodes are based on Arduino Mega Micro-controller and XBee ZigBee RF Modules. The data acquisition and aggregation is performed by the Arduino while the wireless data communication between the nodes is achieved by using the XBee radios. 
An XBee Gateway device by Digi International is used to interface the network to the Digi Device Cloud Platform and a Python script also was written to download the data from the cloud. 

# Frame generation using API library 

The XBee- Arduino software library by Andrew Rapp (source code is available in GitHub) is used to program the Arduino to send the data through the XBee modules mounted on them.

The Arduino also uses the same API frames involved in transmitting and receiving data through the network. On the Arduino, xbee-arduino library is used to handle building, sending, receiving, and parsing API frames. The library has a number of request and response objects that represent API frames sent to or received from the XBee module respectively. The data contained in these objects are set or retrieved by using a number of method calls. 

The ZBTxRequest objects are used to represent ZigBee Transmit Request API frames. A transmit request is always answered with a ZigBee Transmit Status response represented by ZBTxStatusResponse object. The ZBRxResponse objects are used to represent ZigBee Receive Packet API frames. 

The .CSV files received are being stored into character arrays in each node. For the purpose of demonstration, the files for each node was created with custom data assuming only three smart meters in each cluster. Each node has three different character arrays defined: send_buffer[][], rx_buffer[][] and data_own[][]. 
